Installed 1 package in 2.99s
Traceback (most recent call last):
  File "pandas/_libs/tslibs/strptime.pyx", line 460, in pandas._libs.tslibs.strptime.array_strptime
OverflowError: Overflow occurred in npy_datetimestruct_to_datetime

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Dev\Code\iitm\tld\tds-proj-2-cloned\app\codes\task3\code1.py", line 14, in <module>
    df['date_of_registration'] = pd.to_datetime(df['date_of_registration'], format='%d-%m-%Y')
                                 ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devar\AppData\Local\uv\cache\environments-v2\code1-36e7afdd5511de2d\Lib\site-packages\pandas\core\tools\datetimes.py", line 1068, in to_datetime
    cache_array = _maybe_cache(arg, format, cache, convert_listlike)
  File "C:\Users\devar\AppData\Local\uv\cache\environments-v2\code1-36e7afdd5511de2d\Lib\site-packages\pandas\core\tools\datetimes.py", line 249, in _maybe_cache
    cache_dates = convert_listlike(unique_dates, format)
  File "C:\Users\devar\AppData\Local\uv\cache\environments-v2\code1-36e7afdd5511de2d\Lib\site-packages\pandas\core\tools\datetimes.py", line 435, in _convert_listlike_datetimes
    return _array_strptime_with_fallback(arg, name, utc, format, exact, errors)
  File "C:\Users\devar\AppData\Local\uv\cache\environments-v2\code1-36e7afdd5511de2d\Lib\site-packages\pandas\core\tools\datetimes.py", line 469, in _array_strptime_with_fallback
    result, tz_out = array_strptime(arg, fmt, exact=exact, errors=errors, utc=utc)
                     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "pandas/_libs/tslibs/strptime.pyx", line 501, in pandas._libs.tslibs.strptime.array_strptime
  File "pandas/_libs/tslibs/strptime.pyx", line 463, in pandas._libs.tslibs.strptime.array_strptime
pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Out of bounds nanosecond timestamp: 12-12-1212, at position 6. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
