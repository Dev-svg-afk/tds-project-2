{
  "tasks": [
    {
      "id": 1,
      "name": "Load Indian High Court Judgments Metadata",
      "description": "Establish a connection to the S3 bucket and load the structured metadata (parquet files) for the Indian High Court Judgments. This task should initialize the necessary DuckDB extensions (`httpfs`, `parquet`) and then load a filtered subset of the data into memory or a temporary file. Given the large size of the dataset, it's crucial to select only the essential columns and potentially filter by year as early as possible for efficiency. The required columns for subsequent tasks are `court`, `decision_date`, `date_of_registration`, and `year`.",
      "information_needed": {
        "s3_bucket_path": "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet",
        "s3_region": "ap-south-1",
        "duckdb_setup_instructions": "INSTALL httpfs; LOAD httpfs; INSTALL parquet; LOAD parquet;",
        "columns_to_load": ["court", "decision_date", "date_of_registration", "year"]
      },
      "files_for_reference": [],
      "output_file_name": "filtered_judgments_metadata.parquet"
    },
    {
      "id": 2,
      "name": "Analyze Case Disposal by High Court (2019-2022)",
      "description": "Using the metadata loaded in Task 1, filter judgments to include only those released in the years 2019, 2020, 2021, and 2022. Group the filtered data by the `court` column and count the number of cases disposed by each high court within this specified period. Identify and output the name of the high court that has disposed of the most cases.",
      "information_needed": {
        "input_data_source": "Output from Task 1 (filtered_judgments_metadata.parquet)",
        "columns_to_use": ["court", "year"],
        "filter_years": [2019, 2020, 2021, 2022],
        "calculation_method": "Count cases per court, find court with maximum count"
      },
      "files_for_reference": ["filtered_judgments_metadata.parquet"],
      "output_file_name": "most_disposed_court.txt"
    },
    {
      "id": 3,
      "name": "Calculate Case Processing Delay for Court 33_10",
      "description": "From the metadata loaded in Task 1, filter judgments specifically for `court='33_10'`. The `date_of_registration` column is currently a VARCHAR; convert it to a DATE type for accurate calculations. Calculate the `days_delay` for each judgment, which is the difference in days between its `decision_date` and its converted `date_of_registration`. Store the `year` and the calculated `days_delay` for each relevant judgment.",
      "information_needed": {
        "input_data_source": "Output from Task 1 (filtered_judgments_metadata.parquet)",
        "columns_to_use": ["date_of_registration", "decision_date", "court", "year"],
        "filter_court": "33_10",
        "date_conversion_instruction": "Convert 'date_of_registration' (VARCHAR) to DATE type.",
        "delay_calculation": "days_delay = decision_date - date_of_registration (in days)"
      },
      "files_for_reference": ["filtered_judgments_metadata.parquet"],
      "output_file_name": "court_33_10_delay_data.parquet"
    },
    {
      "id": 4,
      "name": "Calculate Regression Slope of Delay by Year",
      "description": "Using the `court_33_10_delay_data.parquet` generated in Task 3, perform a linear regression. The dependent variable should be `days_delay` and the independent variable should be `year`. Extract and output the slope of this regression line. This slope indicates the trend of case processing delay over time for court '33_10'.",
      "information_needed": {
        "input_data_source": "Output from Task 3 (court_33_10_delay_data.parquet)",
        "columns_for_regression": {
          "dependent_variable": "days_delay",
          "independent_variable": "year"
        },
        "metric_to_extract": "Regression slope"
      },
      "files_for_reference": ["court_33_10_delay_data.parquet"],
      "output_file_name": "regression_slope_delay.txt"
    },
    {
      "id": 5,
      "name": "Generate Delay Scatterplot with Regression Line",
      "description": "Utilizing the `court_33_10_delay_data.parquet` from Task 3, create a scatterplot. The 'year' should be mapped to the x-axis and '# of days of delay' (days_delay) to the y-axis. Overlay this scatterplot with the regression line derived from the analysis in Task 4 (or a re-calculated regression line if preferred for plotting). The generated plot must be encoded as a base64 data URI (e.g., `data:image/webp:base64,...`). Ensure the total character length of the base64 URI does not exceed 100,000 characters. Consider efficient image formats (like WebP or highly compressed JPEG/PNG) to meet the size constraint.",
      "information_needed": {
        "input_data_source": "Output from Task 3 (court_33_10_delay_data.parquet)",
        "columns_for_plot": {
          "x_axis": "year",
          "y_axis": "days_delay"
        },
        "plot_elements": ["scatterplot", "regression_line"],
        "output_format": "Base64 data URI",
        "size_constraint": "Under 100,000 characters"
      },
      "files_for_reference": ["court_33_10_delay_data.parquet"],
      "output_file_name": "delay_scatterplot_base64.txt"
    },
    {
      "id": 6,
      "name": "Format Final Answers",
      "description": "Combine the results from Task 2, Task 4, and Task 5 into a single JSON object. The keys of this JSON object should be the exact questions posed in the original problem statement, and the values should be the corresponding answers retrieved from the output files of the preceding tasks.",
      "information_needed": {
        "question_1": "Which high court disposed the most cases from 2019 - 2022?",
        "answer_source_1": "Result from Task 2 (most_disposed_court.txt)",
        "question_2": "What's the regression slope of the date_of_registration - decision_date by year in the court=33_10?",
        "answer_source_2": "Result from Task 4 (regression_slope_delay.txt)",
        "question_3": "Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters",
        "answer_source_3": "Result from Task 5 (delay_scatterplot_base64.txt)"
      },
      "files_for_reference": [
        "most_disposed_court.txt",
        "regression_slope_delay.txt",
        "delay_scatterplot_base64.txt"
      ],
      "output_file_name": "final_answers.json"
    }
  ]
}